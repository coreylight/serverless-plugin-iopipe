// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generated file requires plugin and includes plugin inline 1`] = `
"const iopipe = require('iopipe')({\\"token\\":\\"test-token\\"});

exports['simple'] = function attemptSimple0(event, context, callback) {
  try {
    return iopipe((evt, ctx, cb) => {
      const mod = require('./handlers/simple');
      return mod.handler(evt, ctx, cb);
    })(event, context, callback);
  } catch (err) {
    throw err;
  }
};

exports['multiple'] = function attemptMultiple1(event, context, callback) {
  try {
    return iopipe((evt, ctx, cb) => {
      const mod = require('./handlers/multiple');
      return mod.handler(evt, ctx, cb);
    })(event, context, callback);
  } catch (err) {
    throw err;
  }
};

exports['multipleDifferentHandler'] = function attemptMultipleDifferentHandler2(event, context, callback) {
  try {
    return iopipe((evt, ctx, cb) => {
      const mod = require('./handlers/multiple');
      return mod.differentNameHandler(evt, ctx, cb);
    })(event, context, callback);
  } catch (err) {
    throw err;
  }
};

exports['es5'] = function attemptEs53(event, context, callback) {
  try {
    return iopipe((evt, ctx, cb) => {
      const mod = require('./handlers/es5');
      return mod.handler(evt, ctx, cb);
    })(event, context, callback);
  } catch (err) {
    throw err;
  }
};

exports['multiple-dots-in-name'] = function attemptMultipleDotsInName4(event, context, callback) {
  try {
    return iopipe((evt, ctx, cb) => {
      const mod = require('./handlers/multiple.dots.in.name');
      return mod.handler(evt, ctx, cb);
    })(event, context, callback);
  } catch (err) {
    throw err;
  }
};

exports['noModule'] = function attemptNoModule5(event, context, callback) {
  try {
    return iopipe((evt, ctx, cb) => {
      const mod = require('./handlers/noModule');
      return mod.handler(evt, ctx, cb);
    })(event, context, callback);
  } catch (err) {
    throw err;
  }
};

exports['syntaxError'] = function attemptSyntaxError6(event, context, callback) {
  try {
    return iopipe((evt, ctx, cb) => {
      const mod = require('./handlers/syntaxError');
      return mod.handler(evt, ctx, cb);
    })(event, context, callback);
  } catch (err) {
    throw err;
  }
};

exports['es5Named'] = function attemptEs5Named7(event, context, callback) {
  try {
    return iopipe((evt, ctx, cb) => {
      const mod = require('./handlers/es5Named');
      return mod.handler(evt, ctx, cb);
    })(event, context, callback);
  } catch (err) {
    throw err;
  }
};
"
`;
